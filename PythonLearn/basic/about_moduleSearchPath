Javaでいうところのclasspathのこと。
以下はdocs.python.jpの原文

6.1.2. モジュール検索パス(原文)
spam という名前のモジュールをインポートするとき、インタープリターはまずその名前のビルトインモジュールを探します。
見つからなかった場合は、 spam.py という名前のファイルを sys.path にあるディレクトリのリストから探します。 
sys.path は以下の場所に初期化されます:

入力されたスクリプトのあるディレクトリ (あるいはファイルが指定されなかったときはカレントディレクトリ)。
PYTHONPATH (ディレクトリ名のリスト。シェル変数の PATH と同じ構文)。
インストールごとのデフォルト。
注釈 シンボリックリンクをサポートするファイルシステム上では、入力されたスクリプトのあるディレクトリはシンボリックリンクをたどった後に
計算されます。言い換えるとシンボリックリンクを含むディレクトリはモジュール検索パスに追加 されません。
初期化された後、 Python プログラムは sys.path を修正することができます。スクリプトファイルを含むディレクトリが検索パスの先頭、
標準ライブラリパスよりも前に追加されます。なので、ライブラリのディレクトリにあるファイルよりも、そのディレクトリにある同じ名前の
スクリプトが優先してインポートされます。これは、標準ライブラリを意図して置き換えているのでない限りは間違いのもとです。
より詳しい情報は 標準モジュール を参照してください。

追記
・PYTHON_PATHの読み込みはメインスクリプトの実行時。実行後、os.environのPYTHON_PATHを変更しても反映されない。

相対importについて
  ..でひとつ上の階層に戻る。.で一つ下の階層へ降りる。（例：import ..dao.BaseDao ）
  ただし相対インポートは__init__.pyが格納されている階層でなければ認識されない。
  
  また別のパッケージへ..で参照しようとしても失敗する。相対インポートはあくまでも同一パッケージ内部のみで利用可能と捉えたほうがいい。
  別パッケージを参照する場合はsys.pathを通し、import statementで読み込む。
  
